// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model User {
  ID      String           @id @default(uuid())
  FName   String
  MInit   String?
  LName   String
  Email   String
  Phone   String?
  enum    PreferredContact
  Type    UserType
  Patient Patient?
  Parent  Parent?
}

enum PreferredContact {
  EMAIL
  PHONE
}

enum UserType {
  ADMIN
  USER_SUPPORT
  THERAPIST
}

model Parent {
  ID          String        @id @default(uuid())
  DOB         DateTime
  Gender      Gender
  Address     String
  Children    Patient[]
  ContactForm ContactForm[]

  UserID String @unique
  User   User   @relation(fields: [UserID], references: [ID])
}

model Patient {
  ID             String          @id @default(uuid())
  DOB            DateTime
  Gender         Gender
  Address        String
  Identification String
  Sponsor        Sponsor?        @relation(fields: [SponsorID], references: [SID])
  SponsorID      String?
  Diagnosed      Boolean
  Appointments   Appointment[]
  MedicalRecords MedicalRecord[]
  ProgressReport Report[]

  UserID   String  @unique
  User     User    @relation(fields: [UserID], references: [ID])
  ParentID String?
  Parent   Parent? @relation(fields: [ParentID], references: [ID])

  ContactForm ContactForm?
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Appointment {
  ID            String   @id @default(uuid())
  Type          String
  Time          DateTime
  Comment       String
  MaxAttendance Int
  IsPaidFor     Boolean

  PatientID   String
  Patient     Patient   @relation(fields: [PatientID], references: [ID])
  TherapistID String
  Therapist   Therapist @relation(fields: [TherapistID], references: [ID])
}

model MedicalRecord {
  ID        String  @id
  Data      String
  PatientID String
  Patient   Patient @relation(fields: [PatientID], references: [ID])
}

model Therapist {
  ID                      String            @id @default(uuid())
  TherapistSpecialization TSpecialization[]
  Appointments            Appointment[]
}

model TSpecialization {
  ID             String         @id
  TherapistID    String
  Therapist      Therapist      @relation(fields: [TherapistID], references: [ID])
  Specialization Specialization
}

enum Specialization {
  LEARNING
  SOCIAL_HABILITATION
  CONDUCTUAL
  INTERVENTIONAL
  LANGUAGE
  OCCUPATIONAL
  INDEPENDENT_LIVING
}

model Sponsor {
  SID      String    @id @default(uuid())
  Name     String
  Contact  String
  Patients Patient[]
}

model Report {
  ID          String       @id @default(uuid())
  PatientID   String
  DateCreated DateTime     @default(now())
  Patient     Patient      @relation(fields: [PatientID], references: [ID])
  Responses   ReportData[]
}

model ReportData {
  ID       String @id @default(uuid())
  ReportID String
  Question String
  Answer   String

  Report Report @relation(fields: [ReportID], references: [ID])
}

model ContactForm {
  ID                  String  @id @default(uuid())
  Diagnosed           Boolean
  BeenHereBefore      Boolean
  WantsDiagnosticEval Boolean
  Comments            String?
  Status              Status  @default(NEEDS_PROCESSING)

  parentID String?
  Parent   Parent? @relation(fields: [parentID], references: [ID])

  patientID String?  @unique
  Patient   Patient? @relation(fields: [patientID], references: [ID])
}

enum Status {
  NEEDS_PROCESSING
  NEEDS_SCHEDULING
  PROCESSED
}
