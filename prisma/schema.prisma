// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:dev.db"
}

model User {
    id String @id @default(uuid())

    fName       String
    mInit       String?
    lName       String
    email       String?      @unique
    phone       String     @unique
    whatsApp    String?     @unique
    contactPref ContactType @default(EMAIL)
    type        UserType?

    Specializations Specialization[]
    Sessions        Session[]

    NonEmployee NonEmployee?
}

// if performance becomes an issue, denomailize to directly join parent/patient to user
model NonEmployee {
    id   String @id @unique
    User User   @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    dob         DateTime
    gender      Gender
    streetName  String
    streetNum   Int
    buildingNum Int?

    postCode     Int
    PostCodeCity PostCodeCity @relation(fields: [postCode], references: [postCode], onDelete: Restrict, onUpdate: Cascade)

    Children Patient[] @relation(name: "parent")

    Patient Patient?
}

model PostCodeCity {
    postCode Int    @id @unique
    city     String

    person NonEmployee[]
}

model Patient {
    id   String      @id @unique
    User NonEmployee @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    identification String  @unique
    diagnosed      Boolean

    Appointments    SessionPatient[]
    MedicalRecords  MedicalRecord[]
    ProgressReports Report[]
    ContactForm     ContactForm?

    sponsorId String?
    Sponsor   Sponsor? @relation(fields: [sponsorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

    Parents NonEmployee[] @relation(name: "parent")
}

// define therapist specializations here
model Specialization {
    id String @id @default(uuid())

    name String @unique

    Therapists User[]
}

model Session {
    id String @id @default(uuid())

    time          DateTime @default(now())
    duration      Int
    comment       String?
    maxAttendance Int      @default(1)

    typeId String
    Type   SessionType @relation(fields: [typeId], references: [id], onDelete: Restrict, onUpdate: Cascade)

    therapistId String
    Therapist   User   @relation(fields: [therapistId], references: [id], onDelete: Restrict, onUpdate: Cascade)

    Patients SessionPatient[]

    @@unique([time, therapistId])
}

// define session types in this table
model SessionType {
    id String @id @default(uuid())

    name  String @unique
    color Color

    Sessions Session[]
}

model SessionPatient {
    sessionId String
    Session   Session @relation(fields: [sessionId], references: [id], onDelete: Restrict, onUpdate: Cascade)

    patientId String
    Patient   Patient @relation(fields: [patientId], references: [id], onDelete: Restrict, onUpdate: Cascade)

    paid Boolean @default(false)

    @@id([sessionId, patientId])
}

model MedicalRecord {
    id String @id @default(uuid())

    data String

    patientId String
    Patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Sponsor {
    id String @id @default(uuid())

    name    String
    contact String

    Patients Patient[]
}

model Report {
    id String @id @default(uuid())

    date DateTime @default(now())

    patientId String
    Patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    Questions ReportData[]
}

model ReportData {
    reportId String
    Report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    question String
    answer   String

    @@id([reportId, question])
}

model ContactForm {
    id String @id @default(uuid())

    nationality   String
    returnPatient Boolean
    wantsEval     Boolean
    insurance     InsuranceCompany
    comment       String?
    status        Status           @default(PROCESSING)

    patientId String  @unique
    Patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum ContactType {
    EMAIL
    PHONE
    WHATS_APP
}

enum UserType {
    ADMIN
    USER_SUPPORT
    THERAPIST //should be unness
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

// may make table if they need contact for insurance companies
//  or just want to be able to add companies
enum InsuranceCompany {
    SENASA_CONTRIBUTIVO
    SENASA_SUBSIDIADO
    ARS_HUMANO
    MAPFRE
    LA_MONUMENTAL
    ARS_UNIVERSAL
    ARS_META_SALUD
    ARS_PLAN_SALUD_BANCO_CENTRAL
    RENACER
    OTRO
}

enum Color {
    BLUE
    GREEN
    ORANGE
    PURPLE
    RED
    TEAL
    YELLOW
}

enum Status {
    PROCESSING
    SCHEDULING
    COMPLETED
}
