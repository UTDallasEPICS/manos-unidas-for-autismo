// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:dev.db"
}

model User {
    id                  String          @id @default(uuid())

    fName               String
    mInit               String?
    lName               String
    email               String
    phone               String?
    whatsApp            String?
    prefContact         ContactType     @default(EMAIL)
    type                UserType?

    Patient             Patient?
    Parent              Parent?
    Therapist           Therapist?
}

model Patient {
    id                  String          @id @unique
    User                User            @relation(fields: [id], references: [id])

    identification      String
    dob                 DateTime
    gender              Gender
    address             String
    diagnosed           Boolean

    Parents             Parent[]

    sponsorId           String?
    Sponsor             Sponsor?        @relation(fields: [sponsorId], references: [id])

    Appointments        SessionPatient[]
    MedicalRecords      MedicalRecord[]
    ProgressReports     Report[]
    ContactForm         ContactForm?
}

model Parent {
    id                  String          @id @unique
    User                User            @relation(fields: [id], references: [id])

    dob                 DateTime
    gender              Gender
    address             String

    Children            Patient[]

    ContactForms        ContactForm[]
}

model Therapist {
    id                  String          @id @unique
    User                User            @relation(fields: [id], references: [id])

    Specializations     TSpecialization[]
    Sessions            Session[]
}

model TSpecialization {
    therapistId         String
    Therapist           Therapist       @relation(fields: [therapistId], references: [id])

    Specialization      Specialization

    @@id([therapistId, Specialization])
}

model Session {
    id                  String          @id @default(uuid())

    type                String
    time                DateTime        @default(now())
    comment             String?
    maxAttendance       Int             @default(1)

    Patients            SessionPatient[]

    therapistId         String
    Therapist           Therapist       @relation(fields: [therapistId], references: [id])
}

model SessionPatient {
    sessionId           String
    Session             Session         @relation(fields: [sessionId], references: [id])

    patientId           String
    Patient             Patient         @relation(fields: [patientId], references: [id])

    IsPaidFor           Boolean         @default(false)

    @@id([sessionId, patientId])
}

model MedicalRecord {
    id                  String          @id @default(uuid())

    data                String

    patientId           String
    Patient             Patient         @relation(fields: [patientId], references: [id])
}

model Sponsor {
    id                  String          @id @default(uuid())

    name                String
    contact             String

    Patients            Patient[]
}

model Report {
    id                  String          @id @default(uuid())

    dateCreated         DateTime        @default(now())

    patientId           String
    Patient             Patient         @relation(fields: [patientId], references: [id])

    Data                ReportData[]
}

model ReportData {
    reportId            String
    Report              Report          @relation(fields: [reportId], references: [id])

    question            String
    answer              String

    @@id([reportId, question])
}

model ContactForm {
    id                  String          @id @default(uuid())

    return              Boolean
    wantsEval           Boolean
    comments            String?
    status              Status          @default(NEEDS_PROCESSING)

    Parents             Parent[]

    patientId           String          @unique
    Patient             Patient         @relation(fields: [patientId], references: [id])
}

enum ContactType {
    EMAIL
    PHONE
    WHATS_APP
}

enum UserType {
    ADMIN
    USER_SUPPORT
}

enum Specialization {
    LEARNING
    SOCIAL_HABILITATION
    CONDUCTUAL
    INTERVENTIONAL
    LANGUAGE
    OCCUPATIONAL
    INDEPENDENT_LIVING
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum Status {
    NEEDS_PROCESSING
    NEEDS_SCHEDULING
    COMPLETED
}
